module Aa where

boardWidth :: Int
boardWidth = 8

data Player = White | Black
data Color = Player | Nothing
data State = State Board Player
data Board = Board [Field]
data Field = Field Int Int Color

data Move = Move Int Int

init :: State
init = State initBoard White

initBoard :: Board
initBoard = Board [(Field x y Nothing)|x<-[1..boardWidth],y<-[1..boardWidth]]

legal :: State -> Player -> [Move]
legal (State (Board fields) player) player = map fieldToMove (filter emptyField fields)

emptyField (Field _ _ Nothing) = True
emptyField _ = False

fieldToMove (Field x y _) = (Move x y)

enemy White = Black
enemy Black = White

does :: State -> Player -> Move -> State
does (State (Board fields) player) player (Move x y) = (State (map (applyMove x y player) fields) (enemy player))

applyMove x1 y1 player (Field x y owner)
 | (x1 == x && y1 == y) = (Field x y player) 
 | otherwise = (Field x y owner)




